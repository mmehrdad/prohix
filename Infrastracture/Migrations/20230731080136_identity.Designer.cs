// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Prohix.Infrastracture.DBContexts;

#nullable disable

namespace Prohix.Infrastracture.Migrations
{
    [DbContext(typeof(DataBaseContext))]
    [Migration("20230731080136_identity")]
    partial class identity
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Prohix.Core.Entities.Commons.Country", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Countries", (string)null);
                });

            modelBuilder.Entity("Prohix.Core.Entities.Commons.FieldOfStudy", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("FieldOfStudies", (string)null);
                });

            modelBuilder.Entity("Prohix.Core.Entities.Commons.GradeOfStudy", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("GradeOfStudies", (string)null);
                });

            modelBuilder.Entity("Prohix.Core.Entities.Commons.Language", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Languages", (string)null);
                });

            modelBuilder.Entity("Prohix.Core.Entities.Commons.University", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.ToTable("Universities", (string)null);
                });

            modelBuilder.Entity("Prohix.Core.Entities.Identity.Role", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("Roles", (string)null);
                });

            modelBuilder.Entity("Prohix.Core.Entities.Identity.RoleClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("RoleClaims", (string)null);
                });

            modelBuilder.Entity("Prohix.Core.Entities.Identity.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<DateTime?>("ModifiedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("RemovedDateTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("TeacherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("StudentId")
                        .IsUnique()
                        .HasFilter("[StudentId] IS NOT NULL");

                    b.HasIndex("TeacherId")
                        .IsUnique()
                        .HasFilter("[TeacherId] IS NOT NULL");

                    b.ToTable("Users", (string)null);
                });

            modelBuilder.Entity("Prohix.Core.Entities.Identity.UserClaim", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserClaims", (string)null);
                });

            modelBuilder.Entity("Prohix.Core.Entities.Identity.UserLogin", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("UserLogins", (string)null);
                });

            modelBuilder.Entity("Prohix.Core.Entities.Identity.UserRole", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("UserRoles", (string)null);
                });

            modelBuilder.Entity("Prohix.Core.Entities.Identity.UserToken", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("UserTokens", (string)null);
                });

            modelBuilder.Entity("Prohix.Core.Entities.Proposals.Proposal", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("PLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("Proposals", (string)null);
                });

            modelBuilder.Entity("Prohix.Core.Entities.Proposals.ProposalInSubject", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("ProposalId")
                        .HasColumnType("bigint");

                    b.Property<long>("SubjectId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("ProposalId");

                    b.HasIndex("SubjectId");

                    b.ToTable("ProposalInSubjects", (string)null);
                });

            modelBuilder.Entity("Prohix.Core.Entities.Proposals.ProposalStatus", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<long>("ProposalId")
                        .HasColumnType("bigint");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProposalId");

                    b.HasIndex("TeacherId");

                    b.ToTable("ProposalStatuses", (string)null);
                });

            modelBuilder.Entity("Prohix.Core.Entities.Students.Education", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Average")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<long>("CountryId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<long>("FieldOfStudyId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("GradeOfStudyId")
                        .HasColumnType("bigint");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("datetime2");

                    b.Property<long>("UniversityId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("CountryId")
                        .IsUnique();

                    b.HasIndex("FieldOfStudyId")
                        .IsUnique();

                    b.HasIndex("GradeOfStudyId")
                        .IsUnique();

                    b.HasIndex("StudentId");

                    b.HasIndex("UniversityId")
                        .IsUnique();

                    b.ToTable("Educations", (string)null);
                });

            modelBuilder.Entity("Prohix.Core.Entities.Students.Job", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Employer")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("FromDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Institute")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<string>("JobTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ToDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("Jobs", (string)null);
                });

            modelBuilder.Entity("Prohix.Core.Entities.Students.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<long>("Amount")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<DateTime>("ModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("StudentId");

                    b.ToTable("Payments", (string)null);
                });

            modelBuilder.Entity("Prohix.Core.Entities.Students.Student", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Address")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("CitizenshipId")
                        .HasColumnType("bigint");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte?>("Gender")
                        .HasColumnType("tinyint");

                    b.Property<string>("MiddleName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("MotherTongueId")
                        .HasColumnType("bigint");

                    b.Property<string>("PostalCode")
                        .HasColumnType("nvarchar(max)");

                    b.Property<long?>("SecoundCitizenshipId")
                        .HasColumnType("bigint");

                    b.Property<string>("SureName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("CitizenshipId")
                        .IsUnique()
                        .HasFilter("[CitizenshipId] IS NOT NULL");

                    b.HasIndex("MotherTongueId")
                        .IsUnique()
                        .HasFilter("[MotherTongueId] IS NOT NULL");

                    b.HasIndex("SecoundCitizenshipId")
                        .IsUnique()
                        .HasFilter("[SecoundCitizenshipId] IS NOT NULL");

                    b.ToTable("Students", (string)null);
                });

            modelBuilder.Entity("Prohix.Core.Entities.Students.StudentInLanguage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("datetime2");

                    b.Property<long>("FluancyId")
                        .HasColumnType("bigint");

                    b.Property<byte>("Fluency")
                        .HasColumnType("tinyint");

                    b.Property<bool>("IsRemoved")
                        .HasColumnType("bit");

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint");

                    b.Property<DateTime>("ModifiedTime")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("StudentId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("StudentId");

                    b.ToTable("StudentInLanguages", (string)null);
                });

            modelBuilder.Entity("Prohix.Core.Entities.Subjects.Subject", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Subjects", (string)null);
                });

            modelBuilder.Entity("Prohix.Core.Entities.Teachers.Teacher", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("CartLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SureName")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Teachers", (string)null);
                });

            modelBuilder.Entity("Prohix.Core.Entities.Teachers.TeacherInProposal", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("ProposalId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ProposalId");

                    b.HasIndex("TeacherId");

                    b.ToTable("TeacherInProposals", (string)null);
                });

            modelBuilder.Entity("Prohix.Core.Entities.Teachers.TeacherInSubject", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("SubjectId")
                        .HasColumnType("bigint");

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("SubjectId");

                    b.HasIndex("TeacherId");

                    b.ToTable("TeacherInSubjects", (string)null);
                });

            modelBuilder.Entity("Prohix.Core.Entities.Teachers.TeacherInUniversity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<long>("Id"));

                    b.Property<Guid>("TeacherId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<long>("UniversityId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("TeacherId");

                    b.HasIndex("UniversityId");

                    b.ToTable("TeacherInUniversities", (string)null);
                });

            modelBuilder.Entity("Prohix.Core.Entities.Commons.University", b =>
                {
                    b.HasOne("Prohix.Core.Entities.Commons.Country", null)
                        .WithMany("Universities")
                        .HasForeignKey("CountryId");
                });

            modelBuilder.Entity("Prohix.Core.Entities.Identity.RoleClaim", b =>
                {
                    b.HasOne("Prohix.Core.Entities.Identity.Role", "Role")
                        .WithMany("Claims")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");
                });

            modelBuilder.Entity("Prohix.Core.Entities.Identity.User", b =>
                {
                    b.HasOne("Prohix.Core.Entities.Students.Student", "Student")
                        .WithOne("User")
                        .HasForeignKey("Prohix.Core.Entities.Identity.User", "StudentId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.HasOne("Prohix.Core.Entities.Teachers.Teacher", "Teacher")
                        .WithOne("User")
                        .HasForeignKey("Prohix.Core.Entities.Identity.User", "TeacherId")
                        .OnDelete(DeleteBehavior.Restrict);

                    b.Navigation("Student");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Prohix.Core.Entities.Identity.UserClaim", b =>
                {
                    b.HasOne("Prohix.Core.Entities.Identity.User", "User")
                        .WithMany("Claims")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Prohix.Core.Entities.Identity.UserLogin", b =>
                {
                    b.HasOne("Prohix.Core.Entities.Identity.User", "User")
                        .WithMany("Logins")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Prohix.Core.Entities.Identity.UserRole", b =>
                {
                    b.HasOne("Prohix.Core.Entities.Identity.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Prohix.Core.Entities.Identity.User", "User")
                        .WithMany("Roles")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Prohix.Core.Entities.Identity.UserToken", b =>
                {
                    b.HasOne("Prohix.Core.Entities.Identity.User", "User")
                        .WithMany("UserTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Prohix.Core.Entities.Proposals.Proposal", b =>
                {
                    b.HasOne("Prohix.Core.Entities.Students.Student", "Student")
                        .WithMany("Proposals")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Prohix.Core.Entities.Proposals.ProposalInSubject", b =>
                {
                    b.HasOne("Prohix.Core.Entities.Proposals.Proposal", "Proposal")
                        .WithMany("ProposalInSubjects")
                        .HasForeignKey("ProposalId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Prohix.Core.Entities.Subjects.Subject", "Subject")
                        .WithMany("ProposalInSubjects")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Proposal");

                    b.Navigation("Subject");
                });

            modelBuilder.Entity("Prohix.Core.Entities.Proposals.ProposalStatus", b =>
                {
                    b.HasOne("Prohix.Core.Entities.Proposals.Proposal", "Proposal")
                        .WithMany("ProposalStatuses")
                        .HasForeignKey("ProposalId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Prohix.Core.Entities.Teachers.Teacher", "Teacher")
                        .WithMany("ProposalStatuses")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Proposal");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Prohix.Core.Entities.Students.Education", b =>
                {
                    b.HasOne("Prohix.Core.Entities.Commons.Country", "Country")
                        .WithOne("Education")
                        .HasForeignKey("Prohix.Core.Entities.Students.Education", "CountryId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Prohix.Core.Entities.Commons.FieldOfStudy", "FieldOfStudy")
                        .WithOne("Education")
                        .HasForeignKey("Prohix.Core.Entities.Students.Education", "FieldOfStudyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Prohix.Core.Entities.Commons.GradeOfStudy", "GradeOfStudy")
                        .WithOne("Education")
                        .HasForeignKey("Prohix.Core.Entities.Students.Education", "GradeOfStudyId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Prohix.Core.Entities.Students.Student", "Student")
                        .WithMany("Educations")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Prohix.Core.Entities.Commons.University", "University")
                        .WithOne("Education")
                        .HasForeignKey("Prohix.Core.Entities.Students.Education", "UniversityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("FieldOfStudy");

                    b.Navigation("GradeOfStudy");

                    b.Navigation("Student");

                    b.Navigation("University");
                });

            modelBuilder.Entity("Prohix.Core.Entities.Students.Job", b =>
                {
                    b.HasOne("Prohix.Core.Entities.Students.Student", "Student")
                        .WithMany("Jobs")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Prohix.Core.Entities.Students.Payment", b =>
                {
                    b.HasOne("Prohix.Core.Entities.Students.Student", "Student")
                        .WithMany("Payments")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Prohix.Core.Entities.Students.Student", b =>
                {
                    b.HasOne("Prohix.Core.Entities.Commons.Country", "Citizenship")
                        .WithOne("StudentSecondCitizenship")
                        .HasForeignKey("Prohix.Core.Entities.Students.Student", "CitizenshipId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Prohix.Core.Entities.Commons.Language", "MotherTongue")
                        .WithOne("Student")
                        .HasForeignKey("Prohix.Core.Entities.Students.Student", "MotherTongueId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("Prohix.Core.Entities.Commons.Country", "SecoundCitizenship")
                        .WithOne("StudentCitizenship")
                        .HasForeignKey("Prohix.Core.Entities.Students.Student", "SecoundCitizenshipId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Citizenship");

                    b.Navigation("MotherTongue");

                    b.Navigation("SecoundCitizenship");
                });

            modelBuilder.Entity("Prohix.Core.Entities.Students.StudentInLanguage", b =>
                {
                    b.HasOne("Prohix.Core.Entities.Commons.Language", "Language")
                        .WithMany("StudentInLanguages")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Prohix.Core.Entities.Students.Student", "Student")
                        .WithMany("StudentInLanguages")
                        .HasForeignKey("StudentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Language");

                    b.Navigation("Student");
                });

            modelBuilder.Entity("Prohix.Core.Entities.Teachers.TeacherInProposal", b =>
                {
                    b.HasOne("Prohix.Core.Entities.Proposals.Proposal", "Proposal")
                        .WithMany("TeacherInProposals")
                        .HasForeignKey("ProposalId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Prohix.Core.Entities.Teachers.Teacher", "Teacher")
                        .WithMany("TeacherInProposals")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Proposal");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Prohix.Core.Entities.Teachers.TeacherInSubject", b =>
                {
                    b.HasOne("Prohix.Core.Entities.Subjects.Subject", "Subject")
                        .WithMany("TeacherInSubjects")
                        .HasForeignKey("SubjectId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Prohix.Core.Entities.Teachers.Teacher", "Teacher")
                        .WithMany("TeacherInSubjects")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Subject");

                    b.Navigation("Teacher");
                });

            modelBuilder.Entity("Prohix.Core.Entities.Teachers.TeacherInUniversity", b =>
                {
                    b.HasOne("Prohix.Core.Entities.Teachers.Teacher", "Teacher")
                        .WithMany("TeacherInUniversities")
                        .HasForeignKey("TeacherId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Prohix.Core.Entities.Commons.University", "University")
                        .WithMany("TeacherInUniversities")
                        .HasForeignKey("UniversityId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Teacher");

                    b.Navigation("University");
                });

            modelBuilder.Entity("Prohix.Core.Entities.Commons.Country", b =>
                {
                    b.Navigation("Education")
                        .IsRequired();

                    b.Navigation("StudentCitizenship")
                        .IsRequired();

                    b.Navigation("StudentSecondCitizenship")
                        .IsRequired();

                    b.Navigation("Universities");
                });

            modelBuilder.Entity("Prohix.Core.Entities.Commons.FieldOfStudy", b =>
                {
                    b.Navigation("Education")
                        .IsRequired();
                });

            modelBuilder.Entity("Prohix.Core.Entities.Commons.GradeOfStudy", b =>
                {
                    b.Navigation("Education")
                        .IsRequired();
                });

            modelBuilder.Entity("Prohix.Core.Entities.Commons.Language", b =>
                {
                    b.Navigation("Student")
                        .IsRequired();

                    b.Navigation("StudentInLanguages");
                });

            modelBuilder.Entity("Prohix.Core.Entities.Commons.University", b =>
                {
                    b.Navigation("Education")
                        .IsRequired();

                    b.Navigation("TeacherInUniversities");
                });

            modelBuilder.Entity("Prohix.Core.Entities.Identity.Role", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Prohix.Core.Entities.Identity.User", b =>
                {
                    b.Navigation("Claims");

                    b.Navigation("Logins");

                    b.Navigation("Roles");

                    b.Navigation("UserTokens");
                });

            modelBuilder.Entity("Prohix.Core.Entities.Proposals.Proposal", b =>
                {
                    b.Navigation("ProposalInSubjects");

                    b.Navigation("ProposalStatuses");

                    b.Navigation("TeacherInProposals");
                });

            modelBuilder.Entity("Prohix.Core.Entities.Students.Student", b =>
                {
                    b.Navigation("Educations");

                    b.Navigation("Jobs");

                    b.Navigation("Payments");

                    b.Navigation("Proposals");

                    b.Navigation("StudentInLanguages");

                    b.Navigation("User")
                        .IsRequired();
                });

            modelBuilder.Entity("Prohix.Core.Entities.Subjects.Subject", b =>
                {
                    b.Navigation("ProposalInSubjects");

                    b.Navigation("TeacherInSubjects");
                });

            modelBuilder.Entity("Prohix.Core.Entities.Teachers.Teacher", b =>
                {
                    b.Navigation("ProposalStatuses");

                    b.Navigation("TeacherInProposals");

                    b.Navigation("TeacherInSubjects");

                    b.Navigation("TeacherInUniversities");

                    b.Navigation("User")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
